
html, body, #root {
    height: 100%;
    width: 100%;
}

body {
    margin: 0;
    padding: 0;
}

.fill-parent, .fill-parent-width, .fill-parent-height {
    /* Fill parent to our outsides.*/
    box-sizing: border-box;
}
.fill-parent, .fill-parent-width {
    width: 100%
}

.fill-parent, .fill-parent-height {
    height: 100%;
}

.layout-wrap {
    flex-wrap: wrap;
}


/*
============================================================================
Horizontal and Vertical Layouts
============================================================================
*/

/* Container for items that can fill up the available space, and optionally be constrained by it. */
.layout-vertical {
    display: flex;
    flex-direction: column;
}

.layout-horizontal {
    display: flex;
    flex-direction: row;
}

.layout-item, .layout-item-fill {
    box-sizing: border-box;
}

.layout-vertical > div, .layout-horizontal > div, .layout-vertical > .layout-item, .layout-horizontal > .layout-item {
    flex: none;
}

.layout-vertical > .layout-item-fill, .layout-horizontal > .layout-item-fill {
    flex: 1 1 auto;
}

.layout-vertical > .layout-item-constrain, .layout-horizontal > .layout-item-constrain {
    flex: 0 1 auto;
}

.layout-vertical > .layout-item-fill, .layout-vertical > .layout-item-constrain {
    /* Flex sets min-height to auto, we need to allow it to shrink down */
    min-height: 0;

    /*
    Maintain some sort of inner css specified (vs actual?) value for height, so that 
    child elements can use height percentages and fill their parent (us)
    */
    height: 100%;
}

.layout-horizontal > .layout-item-fill, .layout-horizontal > .layout-item-constrain {
    min-width: 0;
    width: 100%;
}


/*
============================================================================
Content Containers
============================================================================
*/
.container-scroll {
    overflow: auto;
}
